#!/usr/bin/env python3
import subprocess
import threading
import time
import os
import signal

print("""
\033[34m
  _   _  ____   ____        __  __       _      
 | \ | |/ ___| |  _ \      |  \/  | __ _| |_ __
 |  \| | |     | |_) |_____| |\/| |/ _` | | '_ \
 | |\  | |___  |  _ < |_____| |  | | (_| | | | | |
 |_| \_|\____| |_| \_\      |_|  |_|\__,_|_|_| |_|

              _       
             (_)      
              _ _ __  
             | | '_ \\ 
             | | | | |
             |_|_| |_|

      \033[32m üì∂  üì∂  üì∂   L_WIFI   üì∂  üì∂  üì∂ \033[0m \n""")


def start_fake_ap(interface, essid, channel, ap_number):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç airbase-ng –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–¥–µ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞."""
    try:
        print(f"[+] –ó–∞–ø—É—Å–∫ –ø–æ–¥–¥–µ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ {ap_number}: ESSID={essid}, Channel={channel}")
        subprocess.run(["sudo", "airbase-ng", "-e", essid, "-c", str(channel), interface], check=True)
    except subprocess.CalledProcessError as e:
        print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ airbase-ng –¥–ª—è {ap_number}: {e}")

def stop_airbase_ng(interface):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã airbase-ng, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ airbase-ng
        result = subprocess.run(["pgrep", "-f", f"airbase-ng {interface}"], capture_output=True, text=True, check=True)
        pids = result.stdout.strip().split("\n")

        # –£–±–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        for pid in pids:
            try:
                os.kill(int(pid), signal.SIGTERM)  # SIGTERM - —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                print(f"[+] –ü—Ä–æ—Ü–µ—Å—Å airbase-ng —Å PID {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            except OSError as e:
                print(f"[-] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å airbase-ng —Å PID {pid}: {e}")

    except subprocess.CalledProcessError as e:
        # –ï—Å–ª–∏ pgrep –Ω–µ –Ω–∞—à–µ–ª –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
        if e.returncode == 1:
            print("[-] –ü—Ä–æ—Ü–µ—Å—Å—ã airbase-ng –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            print(f"[-] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ airbase-ng: {e}")

if __name__ == "__main__":
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    interface = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, wlan0): ")
    while True:
        try:
            num_aps = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è: "))
            if num_aps > 0:
                break
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

    essid_base = input("–í–≤–µ–¥–∏—Ç–µ –±–∞–∑–æ–≤–æ–µ –∏–º—è ESSID –¥–ª—è —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞: ")

    # –ó–∞–ø—É—Å–∫–∞–µ–º airbase-ng –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–æ—á–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threads = []
    for i in range(1, num_aps + 1):
        essid = f"{essid_base}-{i}"
        channel = i  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        thread = threading.Thread(target=start_fake_ap, args=(interface, essid, channel, i))
        threads.append(thread)
        thread.start()

    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    try:
        for thread in threads:
            thread.join()
    except KeyboardInterrupt:
        print("\n[+] –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–¥–µ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–æ—Å—Ç—É–ø–∞...")
        stop_airbase_ng(interface)  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º airbase-ng –ø—Ä–æ—Ü–µ—Å—Å—ã
        print("[+] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
